---
title: GO.CD features
---
<div class="inner-banner plugins">
	<div class="container">
		<h1 class="caption"><span>Go features</span></h1>
		
	</div>
	
</div>
<main>
<div class="container">
	<div class="go-features">
		<div class="row">
			<div class="col-md-4">
				<figure>
					<%= image_tag "model-complex-worklflows.png" %>
				</figure>
			</div>
			<div class="col-md-8">
				<h4 class="features__title"> Model complex workflows</h4>
				<p>Go's <span class="feature_word">pipelines</span> are the building blocks with which you model your deployment pipeline. With Go, you can easily configure dependencies for fast feedback and on-demand deployment. Parallel and sequential execution work exactly as you would expect. <a href="http://www.thoughtworks.com/insights/blog/model-everything-fail-fast">Here's a glimpse</a> of what can be done in Go.</p>
				<p>With its <span class="feature_word">fan-in/fan-out dependency management</span>, Go always tries to do the "right thing," avoiding spurious builds and unverified configurations. Read more about fan-in/fan-out <a href="http://support.thoughtworks.com/entries/22229668-Go-s-Dependency-Management">here</a></p>
			</div>
		</div>
		<div class="row">
			<div class="col-md-8">
				<h4 class="features__title">Promote trusted artifacts</h4>
				<p>Every pipeline instance is anchored to a particular changeset. Go makes it easy to <span class="feature_word">pass once-built binaries</span> between stages so you know exactly what's being deployed and that the binary has been tested.</p>
			</div>
			<div class="col-md-4">
				<figure>
					<%= image_tag "promote-trusted-artifacts.png" %>
				</figure>
			</div>
		</div>
		<div class="row">
			<div class="col-md-4">
				<figure>
					<%= image_tag "see-how-things-really-work.png" %>
				</figure>
			</div>
			<div class="col-md-8">
				<h4 class="features__title">See how things really work</h4>
				<p>Clich√©d as it may sound, Go's real power is in the visibility it provides over your end-to-end workflow. Go's <span class="feature_word">Value Stream Map</span> lets you track a change from commit to deploy at a glance. And when things go wrong, it's easy to see both the upstream cause and the downstream effects.</p>
			</div>
		</div>
		<div class="row">
			<div class="col-md-8">
				<h4 class="features__title">Deploy any version, any time</h4>
				<p>Go's <span class="feature_word">manual triggers</span> allow you to deploy any known good version of your application to wherever you like. This empowers QA teams with self-service environments, and increases reliability of pushing to production. And, if necessary,it's securable and auditable.</p>
			</div>
			<div class="col-md-4">
				<figure>
					<%= image_tag "deploy-any-version.png" %>
				</figure>
			</div>
		</div>
		<div class="row">
			<div class="col-md-4">
				<figure>
					<%= image_tag "model-complex-worklflows.png" %>
				</figure>
			</div>
			<div class="col-md-8">
				<h4 class="features__title">Run and grok your tests</h4>
				<p>Verification is a key piece of any deployment pipeline. Go will <span class="feature_word">execute tests</span> written in most languages or frameworks. Go's agent grid provides parallel and cross-platform execution. Go's <span class="feature_word">test reporting</span> will tell you in exactly which changeset and on which platform a test started breaking, which comes in extremely handy when fixing a complex broken build.</p>
			</div>
		</div>
		<div class="row">
			<div class="col-md-8">
				<h4 class="features__title">Compare builds</h4>
				<p>Go's <span class="feature_word">compare builds</span> feature can provide a simple bill of materials for any deployment. Perhaps more powerful is its ability to compare the content - both files and commit messages - across any two arbitrary builds. This is invaluable when troubleshooting a broken pipeline.</p>
			</div>
			<div class="col-md-4">
				<figure>
					<%= image_tag "model-complex-worklflows.png" %>
				</figure>
			</div>
		</div>

	<div class="row">
		<div class="col-md-4">
			<figure>
				<%= image_tag "model-complex-worklflows.png" %>
			</figure>
		</div>
		<div class="col-md-8">
			<h4 class="features__title">Eliminate bottlenecks</h4>
			<p>Go's <span class="feature_word">agent grid</span> eliminates bottlenecks, providing trivial parallel execution across pipelines, platforms, versions, branches, etc.</p>
		</div>
	</div>
	<div class="row">
		
		<div class="col-md-8">
			<h4 class="features__title">Keep configuration tidy</h4>
			<p>Easily re-use pipeline configurations via Go's <span class="feature_word">template system</span>. This makes managing pipelines for versions and branches easy as pie.</p>
		</div>
		<div class="col-md-4">
			<figure>
				<%= image_tag "model-complex-worklflows.png" %>
			</figure>
		</div>
	</div>
	<div class="row">
		<div class="col-md-4">
			<figure>
				<%= image_tag "model-complex-worklflows.png" %>
			</figure>
		</div>
		<div class="col-md-8">
			.
			<h4 class="features__title">Trust your team; be responsible</h4>
			<p>While most enterprise applications go overboard with their permission model, Go seeks to provide just enough. In particular, Go supports <span class="feature_word">auditable deployment</span> and can <span class="feature_word">delegate the configuration of pipelines</span> to users without full-blown admin privileges.</p>
		</div>
	</div>
</div>
</div>
</div>
</main>